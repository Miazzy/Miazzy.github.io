{"version":3,"file":"index-877bbcfb.js","sources":["../../src/utils/helper/routerHelper.ts","../../src/views/bpm/manage/processInstance/detail/index.vue"],"sourcesContent":["import type { RouteLocationNormalized, Router, RouteRecordNormalized } from 'vue-router';\nimport { createRouter, createWebHashHistory, RouteRecordRaw } from 'vue-router';\nimport { cloneDeep, omit } from 'lodash-es';\nimport { useMultipleTabStore } from '/@/store/modules/multipleTab';\n\nconst modules = import.meta.glob('../views/**/*.{vue,tsx}');\n\nexport const isUrl = (path: string): boolean => {\n  const reg =\n    /(((^https?:(?:\\/\\/)?)(?:[-:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+(?::\\d+)?|(?:www.|[-:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&%@.\\w_]*)#?(?:[\\w]*))?)$/;\n  return reg.test(path);\n};\n\n/**\n * 注册一个异步组件\n * @param componentPath 例:/bpm/oa/leave/detail\n */\nexport const registerComponent = (componentPath: string) => {\n  for (const item in modules) {\n    if (item.includes(componentPath)) {\n      // 使用异步组件的方式来动态加载组件\n      // @ts-ignore\n      return defineAsyncComponent(modules[item]);\n    }\n  }\n};\n\n/* Layout */\nexport const Layout = () => import('@/layouts/default/index.vue');\n\nexport const getParentLayout = () => {\n  return () =>\n    new Promise((resolve) => {\n      resolve({\n        name: 'ParentLayout',\n      });\n    });\n};\n\n// 按照路由中meta下的rank等级升序来排序路由\nexport const ascending = (arr: any[]) => {\n  arr.forEach((v) => {\n    if (v?.meta?.rank === null) v.meta.rank = undefined;\n    if (v?.meta?.rank === 0) {\n      if (v.name !== 'home' && v.path !== '/') {\n        console.warn('rank only the home page can be 0');\n      }\n    }\n  });\n  return arr.sort((a: { meta: { rank: number } }, b: { meta: { rank: number } }) => {\n    return a?.meta?.rank - b?.meta?.rank;\n  });\n};\n\nexport const getRawRoute = (route: RouteLocationNormalized): RouteLocationNormalized => {\n  if (!route) return route;\n\n  const tabStore = useMultipleTabStore();\n  const tabs = tabStore.getTabList.filter((item) => !item.meta?.hideTab);\n  const cache = tabs.find((item) => item.fullPath == route.fullPath);\n  try {\n    const { matched, ...opt } = cache as RouteLocationNormalized;\n    return {\n      ...opt,\n      matched: matched as RouteRecordNormalized[],\n    };\n  } catch (error) {\n    const { matched, ...opt } = route;\n    return {\n      ...opt,\n      matched: matched as RouteRecordNormalized[],\n    };\n  }\n};\n\n// 后端控制路由生成\nexport const generateRoute = (routes: any[]): any[] => {\n  const res: any[] = [];\n  const modulesRoutesKeys = Object.keys(modules);\n  for (const route of routes) {\n    const meta = {\n      title: route.name,\n      icon: route.icon,\n      hidden: !route.visible,\n      noCache: !route.keepAlive,\n      alwaysShow:\n        route.children &&\n        route.children.length === 1 &&\n        (route.alwaysShow !== undefined ? route.alwaysShow : true),\n    };\n    // 路由地址转首字母大写驼峰，作为路由名称，适配keepAlive\n    let data: any = {\n      path: route.path,\n      name:\n        route.componentName && route.componentName.length > 0\n          ? route.componentName\n          : toCamelCase(route.path, true),\n      redirect: route.redirect,\n      meta: meta,\n    };\n    //处理顶级非目录路由\n    if (!route.children && route.parentId == 0 && route.component) {\n      data.component = Layout;\n      data.meta = {};\n      data.name = toCamelCase(route.path, true) + 'Parent';\n      data.redirect = '';\n      meta.alwaysShow = true;\n      const childrenData: any = {\n        path: '',\n        name: toCamelCase(route.path, true),\n        redirect: route.redirect,\n        meta: meta,\n      };\n      const index = route?.component\n        ? modulesRoutesKeys.findIndex((ev) => ev.includes(route.component))\n        : modulesRoutesKeys.findIndex((ev) => ev.includes(route.path));\n      childrenData.component = modules[modulesRoutesKeys[index]];\n      data.children = [childrenData];\n    } else {\n      // 目录\n      if (route.children) {\n        data.component = Layout;\n        data.redirect = getRedirect(route.path, route.children);\n        // 外链\n      } else if (isUrl(route.path)) {\n        data = {\n          path: '/external-link',\n          component: Layout,\n          meta: {\n            name: route.name,\n          },\n          children: [data],\n        } as any;\n        // 菜单\n      } else {\n        // 对后端传component组件路径和不传做兼容（如果后端传component组件路径，那么path可以随便写，如果不传，component组件路径会根path保持一致）\n        const index = route?.component\n          ? modulesRoutesKeys.findIndex((ev) => ev.includes(route.component))\n          : modulesRoutesKeys.findIndex((ev) => ev.includes(route.path));\n        data.component = modules[modulesRoutesKeys[index]];\n      }\n      if (route.children) {\n        data.children = generateRoute(route.children);\n      }\n    }\n    res.push(data as any);\n  }\n  return res;\n};\n\nexport const getRedirect = (parentPath: string, children: any[]) => {\n  if (!children || children.length == 0) {\n    return parentPath;\n  }\n  const path = generateRoutePath(parentPath, children[0].path);\n  // 递归子节点\n  if (children[0].children) return getRedirect(path, children[0].children);\n};\nconst generateRoutePath = (parentPath: string, path: string) => {\n  if (parentPath.endsWith('/')) {\n    parentPath = parentPath.slice(0, -1); // 移除默认的 /\n  }\n  if (!path.startsWith('/')) {\n    path = '/' + path;\n  }\n  return parentPath + path;\n};\n\nexport const pathResolve = (parentPath: string, path: string) => {\n  if (isUrl(path)) return path;\n  const childPath = path.startsWith('/') || !path ? path : `/${path}`;\n  return `${parentPath}${childPath}`.replace(/\\/\\//g, '/');\n};\n\n// 路由降级\nexport const flatMultiLevelRoutes = (routes: any[]) => {\n  const modules: any[] = cloneDeep(routes);\n  for (let index = 0; index < modules.length; index++) {\n    const route = modules[index];\n    if (!isMultipleRoute(route)) {\n      continue;\n    }\n    promoteRouteLevel(route);\n  }\n  return modules;\n};\n\n// 层级是否大于2\nconst isMultipleRoute = (route: any) => {\n  if (!route || !Reflect.has(route, 'children') || !route.children?.length) {\n    return false;\n  }\n\n  const children = route.children;\n\n  let flag = false;\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index];\n    if (child.children?.length) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n// 生成二级路由\nconst promoteRouteLevel = (route: any) => {\n  let router: Router | null = createRouter({\n    routes: [route as RouteRecordRaw],\n    history: createWebHashHistory(),\n  });\n\n  const routes = router.getRoutes();\n  addToChildren(routes, route.children || [], route);\n  router = null;\n\n  route.children = route.children?.map((item) => omit(item, 'children'));\n};\n\n// 添加所有子菜单\nconst addToChildren = (routes: any[], children: any[], routeModule: any) => {\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index];\n    const route = routes.find((item) => item.name === child.name);\n    if (!route) {\n      continue;\n    }\n    routeModule.children = routeModule.children || [];\n    if (!routeModule.children.find((item) => item.name === route.name)) {\n      routeModule.children?.push(route as unknown as any);\n    }\n    if (child.children?.length) {\n      addToChildren(routes, child.children, routeModule);\n    }\n  }\n};\n\nconst toCamelCase = (str: string, upperCaseFirst: boolean) => {\n  str = (str || '')\n    .replace(/-(.)/g, function (group1: string) {\n      return group1.toUpperCase();\n    })\n    .replaceAll('-', '');\n\n  if (upperCaseFirst && str) {\n    str = str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  return str;\n};\n","<template>\n  <ContentWrap>\n    <!-- 审批信息 -->\n    <el-card\n      v-for=\"(item, index) in runningTasks\"\n      :key=\"index\"\n      v-loading=\"processInstanceLoading\"\n      class=\"box-card\"\n    >\n      <template #header>\n        <span class=\"el-icon-picture-outline\">审批任务【{{ item.name }}】</span>\n      </template>\n      <el-col :offset=\"6\" :span=\"16\">\n        <el-form\n          :ref=\"'form' + index\"\n          :model=\"auditForms[index]\"\n          :rules=\"auditRule\"\n          label-width=\"100px\"\n        >\n          <el-form-item v-if=\"processInstance && processInstance.name\" label=\"流程名\">\n            {{ processInstance.name }}\n          </el-form-item>\n          <el-form-item v-if=\"processInstance && processInstance.startUser\" label=\"流程发起人\">\n            {{ processInstance.startUser.nickname }}\n            <el-tag size=\"small\" type=\"info\">{{ processInstance.startUser.deptName }}</el-tag>\n          </el-form-item>\n          <el-form-item label=\"审批建议\" prop=\"reason\">\n            <el-input\n              v-model=\"auditForms[index].reason\"\n              placeholder=\"请输入审批建议\"\n              type=\"textarea\"\n            />\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-bottom: 20px; margin-left: 10%; font-size: 14px\">\n          <el-button type=\"success\" @click=\"handleAudit(item, true)\">\n            <Icon icon=\"ep:select\" />\n            通过\n          </el-button>\n          <el-button type=\"danger\" @click=\"handleAudit(item, false)\">\n            <Icon icon=\"ep:close\" />\n            不通过\n          </el-button>\n          <el-button type=\"primary\" @click=\"openTaskUpdateAssigneeForm(item.id)\">\n            <Icon icon=\"ep:edit\" />\n            转办\n          </el-button>\n          <el-button type=\"primary\" @click=\"handleDelegate(item)\">\n            <Icon icon=\"ep:position\" />\n            委派\n          </el-button>\n          <el-button type=\"warning\" @click=\"handleBack(item)\">\n            <Icon icon=\"ep:back\" />\n            回退\n          </el-button>\n        </div>\n      </el-col>\n    </el-card>\n\n    <!-- 申请信息 -->\n    <el-card v-loading=\"processInstanceLoading\" class=\"box-card\">\n      <template #header>\n        <span class=\"el-icon-document\">申请信息【{{ processInstance.name }}】</span>\n      </template>\n      <!-- 情况一：流程表单 -->\n      <el-col v-if=\"processInstance?.processDefinition?.formType === 10\" :offset=\"6\" :span=\"16\">\n        <form-create\n          ref=\"fApi\"\n          v-model=\"detailForm.value\"\n          :option=\"detailForm.option\"\n          :rule=\"detailForm.rule\"\n        />\n      </el-col>\n      <!-- 情况二：业务表单 -->\n      <div v-if=\"processInstance?.processDefinition?.formType === 20\">\n        <BusinessFormComponent :id=\"processInstance.businessKey\" />\n      </div>\n    </el-card>\n\n    <!-- 审批记录 -->\n    <ProcessInstanceTaskList :loading=\"tasksLoad\" :tasks=\"tasks\" />\n\n    <!-- 高亮流程图 -->\n    <ProcessInstanceBpmnViewer\n      :id=\"`${id}`\"\n      :bpmn-xml=\"bpmnXML\"\n      :loading=\"processInstanceLoading\"\n      :process-instance=\"processInstance\"\n      :tasks=\"tasks\"\n    />\n\n    <!-- 弹窗：转派审批人 -->\n    <TaskUpdateAssigneeForm ref=\"taskUpdateAssigneeFormRef\" @success=\"getDetail\" />\n  </ContentWrap>\n</template>\n<script lang=\"ts\" setup>\n  import { useUserStore } from '@/store/modules/user';\n  import { setConfAndFields2 } from '@/utils/formCreate';\n  import type { ApiAttrs } from '#/config';\n  import * as DefinitionApi from '@/api/bpm/definition';\n  import * as ProcessInstanceApi from '@/api/bpm/processInstance';\n  import * as TaskApi from '@/api/bpm/task';\n  import TaskUpdateAssigneeForm from './TaskUpdateAssigneeForm.vue';\n  import ProcessInstanceBpmnViewer from './ProcessInstanceBpmnViewer.vue';\n  import ProcessInstanceTaskList from './ProcessInstanceTaskList.vue';\n  import { registerComponent } from '@/utils/helper/routerHelper';\n  import { getCurrentInstance, ref, reactive, unref, nextTick, onMounted } from 'vue';\n  import { useRoute } from 'vue-router';\n  import { useMessage } from '/@/hooks/web/useMessage';\n\n  defineOptions({ name: 'BpmProcessInstanceDetail' });\n\n  const { query } = useRoute(); // 查询参数\n  const message = useMessage(); // 消息弹窗\n  const { proxy } = getCurrentInstance() as any;\n\n  const userId = useUserStore().getUser.id; // 当前登录的编号\n  const id = query.id as unknown as number; // 流程实例的编号\n  const processInstanceLoading = ref(false); // 流程实例的加载中\n  const processInstance = ref<any>({}); // 流程实例\n  const bpmnXML = ref(''); // BPMN XML\n  const tasksLoad = ref(true); // 任务的加载中\n  const tasks = ref<any[]>([]); // 任务列表\n  // ========== 审批信息 ==========\n  const runningTasks = ref<any[]>([]); // 运行中的任务\n  const auditForms = ref<any[]>([]); // 审批任务的表单\n  const auditRule = reactive({\n    reason: [{ required: true, message: '审批建议不能为空', trigger: 'blur' }],\n  });\n  // ========== 申请信息 ==========\n  const fApi = ref<ApiAttrs>(); //\n  const detailForm = ref({\n    // 流程表单详情\n    rule: [],\n    option: {},\n    value: {},\n  });\n\n  /** 处理审批通过和不通过的操作 */\n  const handleAudit = async (task, pass) => {\n    // 1.1 获得对应表单\n    const index = runningTasks.value.indexOf(task);\n    const auditFormRef = proxy.$refs['form' + index][0];\n    // 1.2 校验表单\n    const elForm = unref(auditFormRef);\n    if (!elForm) return;\n    const valid = await elForm.validate();\n    if (!valid) return;\n\n    // 2.1 提交审批\n    const data = {\n      id: task.id,\n      reason: auditForms.value[index].reason,\n    };\n    if (pass) {\n      await TaskApi.approveTask(data);\n      message.success('审批通过成功');\n    } else {\n      await TaskApi.rejectTask(data);\n      message.success('审批不通过成功');\n    }\n    // 2.2 加载最新数据\n    getDetail();\n  };\n\n  /** 转派审批人 */\n  const taskUpdateAssigneeFormRef = ref();\n  const openTaskUpdateAssigneeForm = (id: string) => {\n    taskUpdateAssigneeFormRef.value.open(id);\n  };\n\n  /** 处理审批退回的操作 */\n  const handleDelegate = async (task) => {\n    message.error('暂不支持【委派】功能，可以使用【转派】替代！');\n    console.log(task);\n  };\n\n  /** 处理审批退回的操作 */\n  const handleBack = async (task) => {\n    message.error('暂不支持【退回】功能！');\n    console.log(task);\n  };\n\n  /** 获得详情 */\n  const getDetail = () => {\n    // 1. 获得流程实例相关\n    getProcessInstance();\n    // 2. 获得流程任务列表（审批记录）\n    getTaskList();\n  };\n\n  /** 加载流程实例 */\n  const BusinessFormComponent = ref(null); // 异步组件\n  const getProcessInstance = async () => {\n    try {\n      processInstanceLoading.value = true;\n      const data = await ProcessInstanceApi.getProcessInstance(id);\n      if (!data) {\n        message.error('查询不到流程信息！');\n        return;\n      }\n      processInstance.value = data;\n\n      // 设置表单信息\n      const processDefinition = data.processDefinition;\n      if (processDefinition.formType === 10) {\n        setConfAndFields2(\n          detailForm,\n          processDefinition.formConf,\n          processDefinition.formFields,\n          data.formVariables,\n        );\n        nextTick().then(() => {\n          fApi.value?.fapi?.btn.show(false);\n          fApi.value?.fapi?.resetBtn.show(false);\n          fApi.value?.fapi?.disabled(true);\n        });\n      } else {\n        BusinessFormComponent.value = registerComponent(data.processDefinition.formCustomViewPath);\n      }\n\n      // 加载流程图\n      bpmnXML.value = await DefinitionApi.getProcessDefinitionBpmnXML(\n        processDefinition.id as number,\n      );\n    } finally {\n      processInstanceLoading.value = false;\n    }\n  };\n\n  /** 加载任务列表 */\n  const getTaskList = async () => {\n    try {\n      // 获得未取消的任务\n      tasksLoad.value = true;\n      const data = await TaskApi.getTaskListByProcessInstanceId(id);\n      tasks.value = [];\n      // 1.1 移除已取消的审批\n      data.forEach((task) => {\n        if (task.result !== 4) {\n          tasks.value.push(task);\n        }\n      });\n      // 1.2 排序，将未完成的排在前面，已完成的排在后面；\n      tasks.value.sort((a, b) => {\n        // 有已完成的情况，按照完成时间倒序\n        if (a.endTime && b.endTime) {\n          return b.endTime - a.endTime;\n        } else if (a.endTime) {\n          return 1;\n        } else if (b.endTime) {\n          return -1;\n          // 都是未完成，按照创建时间倒序\n        } else {\n          return b.createTime - a.createTime;\n        }\n      });\n\n      // 获得需要自己审批的任务\n      runningTasks.value = [];\n      auditForms.value = [];\n      tasks.value.forEach((task) => {\n        // 2.1 只有待处理才需要\n        if (task.result !== 1) {\n          return;\n        }\n        // 2.2 自己不是处理人\n        if (!task.assigneeUser || task.assigneeUser.id !== userId) {\n          return;\n        }\n        // 2.3 添加到处理任务\n        runningTasks.value.push({ ...task });\n        auditForms.value.push({\n          reason: '',\n        });\n      });\n    } finally {\n      tasksLoad.value = false;\n    }\n  };\n\n  /** 初始化 */\n  onMounted(() => {\n    getDetail();\n  });\n</script>\n"],"names":["modules","registerComponent","componentPath","item","query","useRoute","message","useMessage","proxy","getCurrentInstance","userId","useUserStore","id","processInstanceLoading","ref","processInstance","bpmnXML","tasksLoad","tasks","runningTasks","auditForms","auditRule","reactive","fApi","detailForm","handleAudit","task","pass","__async","index","auditFormRef","elForm","unref","data","TaskApi.approveTask","TaskApi.rejectTask","getDetail","taskUpdateAssigneeFormRef","openTaskUpdateAssigneeForm","handleDelegate","handleBack","getProcessInstance","getTaskList","BusinessFormComponent","ProcessInstanceApi.getProcessInstance","processDefinition","setConfAndFields2","nextTick","_b","_a","_d","_c","_f","_e","DefinitionApi.getProcessDefinitionBpmnXML","TaskApi.getTaskListByProcessInstanceId","a","b","__spreadValues","onMounted"],"mappings":"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"}