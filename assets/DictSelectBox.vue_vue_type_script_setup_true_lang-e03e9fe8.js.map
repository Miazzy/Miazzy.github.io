{"version":3,"file":"DictSelectBox.vue_vue_type_script_setup_true_lang-e03e9fe8.js","sources":["../../src/components/Framework/Combox/DictSelectBox.vue"],"sourcesContent":["<template>\n  <a-select\n    v-if=\"props.vmode == 'edit' || props.disabled\"\n    v-model:value=\"selectedValue\"\n    show-search\n    allow-clear\n    :mode=\"props.multiple\"\n    :disabled=\"isDisabled\"\n    :maxTagCount=\"props.maxTagCount\"\n    :style=\"`width: ${typeof props.width == 'number' ? props.width + 'px' : props.width}`\"\n    :options=\"options\"\n    :filter-option=\"filterOption\"\n    placeholder=\"请选择数据...\"\n    @mouseenter=\"handleFocus\"\n    @inputKeyDown=\"handleFocus\"\n    @change=\"handleChange\"\n  />\n  <span v-if=\"props.vmode == 'view'\">{{ findOption(props.value) }}</span>\n</template>\n<script lang=\"ts\" setup>\n  import type { SelectProps } from 'ant-design-vue';\n  import { ref, onMounted, defineProps, defineEmits, watch, onActivated, computed } from 'vue';\n  import { useDictStoreWithOut } from '@/store/modules/dict';\n  import { createLocalStorage } from '@/utils/cache';\n  import { DICT_DATA__KEY } from '@/enums/cacheEnum';\n  import { MsgManager } from '/@/message/MsgManager';\n\n  const ls = createLocalStorage();\n\n  const dictStore = useDictStoreWithOut();\n  const selectedValue = ref<any>();\n  const options = ref<SelectProps['options']>([]);\n\n  // 注入全局的disable状态\n  const appDisabled = ref(false);\n\n  // 根据disable状态计算出组件的disable状态\n  const isDisabled = computed(() => {\n    return props.disabled || appDisabled.value;\n  });\n\n  const props = defineProps({\n    vmode: { type: String, default: 'edit' },\n    disabled: { type: Boolean, default: false },\n    mode: { type: String, default: 'group' }, // 如果mode为group模式，则统一加载数据\n    width: { type: [Number, String], default: '100%' },\n    type: { type: String, default: '' },\n    subtype: { type: String, default: '' },\n    filter: { type: Function, default: null },\n    value: { type: [String, Number, Array], default: null }, // 搜索框文本\n    delaytimes: { type: Number, default: 900 },\n    multiple: { type: String, default: 'combobox' },\n    callback: { type: Function, default: null },\n    maxTagCount: { type: Number, default: 10 },\n  });\n\n  // 选中下拉框选项事件函数\n  const handleChange = (value: string, node) => {\n    emit('update:value', value);\n    emit('change', value, node, options.value);\n    if (props.callback != null) {\n      props.callback(value, node, options.value);\n    }\n  };\n\n  // 设置value\n  const setupValue = () => {\n    if (props.multiple == 'multiple') {\n      selectedValue.value = props.value == null ? [] : (props.value as any[]);\n    } else if (typeof props.value == 'string') {\n      selectedValue.value = props.value === 'null' ? '' : (props.value as string);\n    } else if (typeof props.value == 'number') {\n      selectedValue.value = props.value as number;\n    } else {\n      selectedValue.value = props.value == null ? '' : props.value;\n    }\n\n    try {\n      if (props.multiple !== 'multiple') {\n        const flag =\n          options.value &&\n          props.value != null &&\n          props.value != 'null' &&\n          options.value.length > 0 &&\n          typeof options.value[0]?.value == 'string';\n        if (flag) {\n          selectedValue.value = String(props.value);\n        } else if (props.value == null) {\n          selectedValue.value = '';\n        } else if (props.value == 'null') {\n          selectedValue.value = '';\n        }\n      }\n\n      if (props.subtype != '') {\n        options.value = options?.value.filter((value) => {\n          if (Reflect.has(value, 'relationDict')) {\n            return value.relationDict === props.subtype;\n          } else {\n            return false;\n          }\n        });\n      }\n    } catch (error) {\n      //\n    }\n  };\n\n  // 选项过滤函数\n  const filterOption = (input: string, option: any) => {\n    if (props.filter == null) {\n      return option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    } else {\n      return props.filter(input, option);\n    }\n  };\n\n  const findOption = (value) => {\n    const item = options.value.find((item) => {\n      return item.value == value;\n    });\n    return item ? item?.label : value;\n  };\n\n  // 定义emits\n  const emit = defineEmits(['update:value', 'change']);\n\n  // 处理Focus、keydown等函数\n  const handleFocus = () => {\n    const { type } = props;\n    const list = options.value;\n    if (!list || list?.length == 0) {\n      console.warn('dict select box of type:', type, ' has not loaded, and load this data again.');\n      handleInitData();\n    }\n  };\n\n  // 处理初始化操作函数\n  const handleInitData = async () => {\n    // 在组件挂载后，通过后端接口获取数据字段的数据\n    try {\n      const { type } = props;\n      if (props.multiple == 'multiple' || props.multiple == 'tags') {\n        selectedValue.value = [];\n      } else if (props.value == null || props.value == 'null') {\n        selectedValue.value = '';\n      }\n      let cache = await ls.fget(DICT_DATA__KEY + type);\n      if (!cache) {\n        if (props.mode !== 'group') {\n          // 调用后端接口获取数据\n          const response = await dictStore.fetchBackendData('', props);\n          // 格式化后端数据，将数据转换为适用于下拉框的格式\n          options.value = response;\n          setupValue();\n        } else {\n          // 数据字典的多个组件示例，初始化时间需要通过此timestamp错开，否则会同时发送多个request请求，当初始化时间错开后，后续的request请求将通过缓存获取返回结果\n          const timestamp =\n            (props.delaytimes * (Math.random() + Math.random() + Math.random())) / 2;\n          dictStore.setDictKey(props.type);\n          setTimeout(async () => {\n            const typeList = dictStore.getDictKey.join(',');\n            cache = await ls.fget(DICT_DATA__KEY + type);\n            if (!cache) {\n              // 调用后端接口获取数据\n              let response = await dictStore.fetchBackendData(typeList, props);\n              options.value = response;\n              if (!response || response.length == 0) {\n                // 未获取到数据，则再次加载\n                response = await dictStore.fetchBackendData(type, props);\n                options.value = response;\n              }\n            } else {\n              options.value = cache;\n            }\n            setupValue();\n          }, timestamp);\n        }\n      } else {\n        options.value = cache;\n        setupValue();\n      }\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n    }\n  };\n\n  watch(\n    () => props.value,\n    () => {\n      setupValue();\n    },\n  );\n\n  // 处于激活状态时，检查选项是否正常加载，如果未加载则再次加载\n  onActivated(async () => {\n    setTimeout(() => {\n      handleFocus();\n    }, 1500);\n  });\n\n  // 启动加载\n  onMounted(async () => {\n    handleInitData();\n    // MsgManager.getInstance().listen('global-disabled', (message) => { appDisabled.value = message; });\n    setTimeout(() => {\n      handleFocus();\n    }, 1500);\n  });\n</script>\n"],"names":["ls","createLocalStorage","dictStore","useDictStoreWithOut","selectedValue","ref","options","appDisabled","isDisabled","computed","props","handleChange","value","node","emit","setupValue","_a","error","filterOption","input","option","findOption","item","handleFocus","type","list","handleInitData","__async","cache","DICT_DATA__KEY","response","timestamp","typeList","watch","onActivated","onMounted"],"mappings":"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"}