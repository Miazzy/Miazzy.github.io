{"version":3,"file":"index.vue_vue_type_script_setup_true_lang-e7a017e1.js","sources":["../../src/api/bpm/system/role/index.ts","../../src/api/bpm/system/dept/index.ts","../../src/api/bpm/system/post/index.ts","../../src/views/bpm/manage/taskAssignRule/index.vue"],"sourcesContent":["import { defHttp } from '/@/utils/http/axios';\n\nexport interface RoleVO {\n  id: number;\n  name: string;\n  code: string;\n  sort: number;\n  status: number;\n  type: number;\n  dataScope: number;\n  dataScopeDeptIds: number[];\n  createTime: Date;\n}\n\nexport interface UpdateStatusReqVO {\n  id: number;\n  status: number;\n}\n\n// 表单API\nexport enum SystemRoleApi {\n  GetRolePage = '/system/role/page',\n  GetSimpleRoleList = '/system/role/list-all-simple',\n  GetRole = '/system/role/get?id=',\n  CreateRole = '/system/role/create',\n  UpdateRole = '/system/role/update',\n  UpdateRoleStatus = '/system/role/update-status',\n  DeleteRole = '/system/role/delete?id=',\n  ExportRole = '/system/role/export-excel',\n}\n\n// 查询角色列表\nexport const getRolePage = async (params: any) => {\n  const requestParams = { url: SystemRoleApi.GetRolePage, params };\n  return defHttp.get<any>(requestParams, {});\n};\n\n// 查询角色（精简)列表\nexport const getSimpleRoleList = async (): Promise<RoleVO[]> => {\n  const params = { status: 1 };\n  const requestParams = { url: SystemRoleApi.GetSimpleRoleList, params };\n  return defHttp.get<any>(requestParams, { isOnlyResult: true });\n};\n\n// 查询角色详情\nexport const getRole = async (id: number) => {\n  const requestParams = { url: SystemRoleApi.GetRole + id };\n  return defHttp.get<any>(requestParams, {});\n};\n\n// 新增角色\nexport const createRole = async (data: RoleVO) => {\n  const requestParams = { url: SystemRoleApi.CreateRole, data };\n  return defHttp.post<any>(requestParams, {});\n};\n\n// 修改角色\nexport const updateRole = async (data: RoleVO) => {\n  const requestParams = { url: SystemRoleApi.UpdateRole, data };\n  return defHttp.put<any>(requestParams, {});\n};\n\n// 修改角色状态\nexport const updateRoleStatus = async (data: UpdateStatusReqVO) => {\n  const requestParams = { url: SystemRoleApi.UpdateRoleStatus, data };\n  return defHttp.put<any>(requestParams, {});\n};\n\n// 删除角色\nexport const deleteRole = async (id: number) => {\n  const requestParams = { url: SystemRoleApi.DeleteRole + id };\n  return defHttp.delete<any>(requestParams, {});\n};\n\n// 导出角色\nexport const exportRole = (params) => {\n  const requestParams = { url: SystemRoleApi.ExportRole, params };\n  return defHttp.download<any>(requestParams, {});\n};\n","import { defHttp } from '/@/utils/http/axios';\n\nexport interface DeptVO {\n  id?: number;\n  name: string;\n  parentId: number;\n  status: number;\n  sort: number;\n  leaderUserId: number;\n  phone: string;\n  email: string;\n  createTime: Date;\n}\n\n// 表单API\nexport enum DeptApi {\n  GetSimpleDeptList = '/system/org/list-all-simple',\n  GetDeptPage = '/system/dept/list',\n  GetDept = '/system/dept/get?id=',\n  CreateDept = '/system/dept/create',\n  UpdateDept = '/system/dept/update',\n  DeleteDept = '/system/dept/delete?id=',\n}\n\n// 查询部门（精简)列表\nexport const getSimpleDeptList = async (): Promise<DeptVO[]> => {\n  const params = {\n    orgKindId: 'dpt',\n  };\n  const requestParams = { url: DeptApi.GetSimpleDeptList, params };\n  return defHttp.get<any>(requestParams, { isOnlyResult: true });\n};\n\n// 查询部门列表\nexport const getDeptPage = async (params: any) => {\n  const requestParams = { url: DeptApi.GetDeptPage, params };\n  return defHttp.get<any>(requestParams, {});\n};\n\n// 查询部门详情\nexport const getDept = async (id: number) => {\n  const requestParams = { url: DeptApi.GetDept + id };\n  return defHttp.get<any>(requestParams, {});\n};\n\n// 新增部门\nexport const createDept = async (data: DeptVO) => {\n  const requestParams = { url: DeptApi.CreateDept, data };\n  return defHttp.post<any>(requestParams, {});\n};\n\n// 修改部门\nexport const updateDept = async (data: DeptVO) => {\n  const requestParams = { url: DeptApi.UpdateDept, data };\n  return defHttp.put<any>(requestParams, {});\n};\n\n// 删除部门\nexport const deleteDept = async (id: number) => {\n  const requestParams = { url: DeptApi.DeleteDept + id };\n  return defHttp.delete<any>(requestParams, {});\n};\n","import { defHttp } from '/@/utils/http/axios';\n\nexport interface PostVO {\n  id?: number;\n  name: string;\n  code: string;\n  sort: number;\n  status: number;\n  remark: string;\n  createTime?: Date;\n}\n\n// 表单API\nexport enum PostApi {\n  GetPostPage = '/system/post/page',\n  GetSimplePostList = '/system/post/list-all-simple',\n  GetPost = '/system/post/get?id=',\n  CreatePost = '/system/post/create',\n  UpdatePost = '/system/post/update',\n  DeletePost = '/system/post/delete?id=',\n  ExportPost = '/system/post/export',\n}\n\n// 查询岗位列表\nexport const getPostPage = async (params: any) => {\n  const requestParams = { url: PostApi.GetPostPage, params };\n  return defHttp.get<any>(requestParams, {});\n};\n\n// 获取岗位精简信息列表\nexport const getSimplePostList = async (): Promise<PostVO[]> => {\n  const params = {\n    orgKindId: 'pos',\n  };\n  const requestParams = { url: PostApi.GetSimplePostList, params };\n  return defHttp.get<any>(requestParams, { isOnlyResult: true });\n};\n\n// 查询岗位详情\nexport const getPost = async (id: number) => {\n  const requestParams = { url: PostApi.GetPost + id };\n  return defHttp.get<any>(requestParams, {});\n};\n\n// 新增岗位\nexport const createPost = async (data: PostVO) => {\n  const requestParams = { url: PostApi.CreatePost, data };\n  return defHttp.post<any>(requestParams, {});\n};\n\n// 修改岗位\nexport const updatePost = async (data: PostVO) => {\n  const requestParams = { url: PostApi.UpdatePost, data };\n  return defHttp.post<any>(requestParams, {});\n};\n\n// 删除岗位\nexport const deletePost = async (id: number) => {\n  const requestParams = { url: PostApi.DeletePost + id };\n  return defHttp.post<any>(requestParams, {});\n};\n\n// 导出岗位\nexport const exportPost = async (params) => {\n  const requestParams = { url: PostApi.ExportPost, params };\n  return defHttp.post<any>(requestParams, {});\n};\n","<template>\n  <div>\n    <ContentWrap>\n      <el-table v-loading=\"loading\" :data=\"list\">\n        <el-table-column label=\"任务名\" align=\"center\" prop=\"taskDefinitionName\" />\n        <el-table-column label=\"任务标识\" align=\"center\" prop=\"taskDefinitionKey\" />\n        <el-table-column label=\"规则类型\" align=\"center\" prop=\"type\">\n          <template #default=\"scope\">\n            <!-- <dict-tag :type=\"DICT_TYPE.BPM_TASK_ASSIGN_RULE_TYPE\" :value=\"scope.row.type\" /> -->\n            {{ getAssignRuleType(scope.row.type) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"规则范围\" align=\"center\" prop=\"options\">\n          <template #default=\"scope\">\n            <el-tag class=\"mr-5px\" :key=\"option\" v-for=\"option in scope.row.options\">\n              {{ getAssignRuleOptionName(scope.row.type, option) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"抄送范围\" align=\"center\" prop=\"options\">\n          <template #default=\"scope\">\n            <el-tag class=\"mr-5px\" :key=\"option\" v-for=\"option in scope.row.ccOptions\">\n              {{ getAssignRuleOptionName(scope.row.ccType, option) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column v-if=\"queryParams.modelId\" label=\"操作\" align=\"center\">\n          <template #default=\"scope\">\n            <el-button\n              link\n              type=\"primary\"\n              @click=\"openForm(scope.row, 'assign')\"\n              v-hasPermi=\"['bpm:task-assign-rule:update']\"\n            >\n              修改\n            </el-button>\n            <el-button\n              link\n              type=\"primary\"\n              @click=\"openForm(scope.row, 'cc')\"\n              v-hasPermi=\"['bpm:task-assign-rule:update']\"\n            >\n              抄送\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </ContentWrap>\n\n    <!-- 添加/修改弹窗 -->\n    <TaskAssignRuleForm ref=\"formRef\" @success=\"getList\" />\n  </div>\n</template>\n<script lang=\"ts\" setup>\n  import { DICT_TYPE, getIntDictOptions } from '@/utils/dict';\n  import TaskAssignRuleForm from '@/views/bpm/manage/taskAssignRule/taskAssignRuleForm.vue';\n  import * as TaskAssignRuleApi from '@/api/bpm/taskAssignRule';\n  import * as RoleApi from '@/api/bpm/system/role';\n  import * as DeptApi from '@/api/bpm/system/dept';\n  import * as PostApi from '@/api/bpm/system/post';\n  import * as UserApi from '@/api/bpm/system/user';\n  import * as UserGroupApi from '@/api/bpm/userGroup';\n  import { ref, reactive, onMounted } from 'vue';\n  import { useRoute } from 'vue-router';\n\n  defineOptions({ name: 'BpmTaskAssignRule' });\n\n  const props = defineProps({\n    modelId: { type: String, default: '' },\n    processDefinitionId: { type: String, default: '' },\n  });\n\n  const { query } = useRoute(); // 查询参数\n  const loading = ref(true); // 列表的加载中\n  const list = ref([]); // 列表的数据\n  const queryParams = reactive({\n    modelId: query.modelId || props.modelId, // 流程模型的编号。如果 modelId 非空，则用于流程模型的查看与配置\n    processDefinitionId: query.processDefinitionId || props.processDefinitionId, // 流程定义的编号。如果 processDefinitionId 非空，则用于流程定义的查看，不支持配置\n  });\n  const roleOptions = ref<RoleApi.RoleVO[]>([]); // 角色列表\n  const deptOptions = ref<DeptApi.DeptVO[]>([]); // 部门列表\n  const postOptions = ref<PostApi.PostVO[]>([]); // 岗位列表\n  const userOptions = ref<UserApi.UserVO[]>([]); // 用户列表\n  const userGroupOptions = ref<UserGroupApi.UserGroupVO[]>([]); // 用户组列表\n  const taskAssignScriptDictDatas = getIntDictOptions(DICT_TYPE.BPM_TASK_ASSIGN_SCRIPT);\n  \n\n  /** 查询列表 */\n  const getList = async () => {\n    loading.value = true;\n    try {\n      list.value = await TaskAssignRuleApi.getTaskAssignRuleList(queryParams);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  /** 翻译规则类型 */\n  const getAssignRuleType = (option) => {\n    const bpmTaskAssignRuleType = getIntDictOptions(DICT_TYPE.BPM_TASK_ASSIGN_RULE_TYPE);\n    for (const ruleType of bpmTaskAssignRuleType) {\n      if (ruleType.value === option) {\n        return ruleType.label;\n      }\n    }\n    return '';\n  };\n\n  /** 翻译规则范围 */\n  const getAssignRuleOptionName = (type, option) => {\n    if (type === 10) {\n      for (const roleOption of roleOptions.value) {\n        if (roleOption.id === option) {\n          return roleOption.name;\n        }\n      }\n    } else if (type === 20 || type === 21) {\n      for (const deptOption of deptOptions.value) {\n        if (deptOption.id === option) {\n          return deptOption.name;\n        }\n      }\n    } else if (type === 22) {\n      for (const postOption of postOptions.value) {\n        if (postOption.id === option) {\n          return postOption.name;\n        }\n      }\n    } else if (type === 30 || type === 31 || type === 32) {\n      for (const userOption of userOptions.value) {\n        if (userOption.id === option) {\n          return userOption.name;\n        }\n      }\n    } else if (type === 40) {\n      for (const userGroupOption of userGroupOptions.value) {\n        if (userGroupOption.id === option) {\n          return userGroupOption.name;\n        }\n      }\n    } else if (type === 50) {\n      option = option + ''; // 转换成 string\n      for (const dictData of taskAssignScriptDictDatas) {\n        if (dictData.value === option) {\n          return dictData.label;\n        }\n      }\n    }\n    return '未知(' + option + ')';\n  };\n\n  /** 添加/修改操作 */\n  const formRef = ref();\n  const openForm = (row: TaskAssignRuleApi.TaskAssignVO, category) => {\n    const options = {\n      role: roleOptions.value,\n      dept: deptOptions.value,\n      post: postOptions.value,\n      user: userOptions.value,\n      userGroup: userGroupOptions.value,\n    };\n    let params = {\n      id: row.id,\n      taskDefinitionKey: row.taskDefinitionKey,\n      taskDefinitionName: row.taskDefinitionName,\n      processDefinitionId: (row.processDefinitionId == null?'':row.processDefinitionId),\n      type: row.type,\n      options: row.options\n    };\n    if(category == 'cc'){\n      params.id = row.ccId;\n      params.type = row.ccType;\n      params.options = row.ccOptions;\n    }\n    formRef.value.open(queryParams.modelId, params, options, category);\n  };\n\n  /** 初始化 */\n  onMounted(async () => {\n    // 获得角色列表\n    roleOptions.value = await RoleApi.getSimpleRoleList();\n    // 获得部门列表\n    deptOptions.value = await DeptApi.getSimpleDeptList();\n    // 获得岗位列表\n    postOptions.value = await PostApi.getSimplePostList();\n    // 获得用户列表\n    userOptions.value = await UserApi.getSimpleUserList();\n    // 获得用户组列表\n    userGroupOptions.value = await UserGroupApi.getSimpleUserGroupList();\n    await getList();\n  });\n</script>\n"],"names":["getSimpleRoleList","__async","requestParams","defHttp","getSimpleDeptList","getSimplePostList","query","useRoute","loading","ref","list","queryParams","reactive","props","roleOptions","deptOptions","postOptions","userOptions","userGroupOptions","taskAssignScriptDictDatas","getIntDictOptions","DICT_TYPE","getList","TaskAssignRuleApi.getTaskAssignRuleList","getAssignRuleType","option","bpmTaskAssignRuleType","ruleType","getAssignRuleOptionName","type","roleOption","deptOption","postOption","userOption","userGroupOption","dictData","formRef","openForm","row","category","options","params","onMounted","RoleApi.getSimpleRoleList","DeptApi.getSimpleDeptList","PostApi.getSimplePostList","UserApi.getSimpleUserList","UserGroupApi.getSimpleUserGroupList"],"mappings":"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"}