{"version":3,"file":"formDialog.vue_vue_type_script_setup_true_lang-c9268216.js","sources":["../../src/views/bpm/manage/workflow/formDialog.vue"],"sourcesContent":["<template>\n  <Dialog\n    :visible=\"dialogVisible\"\n    @update:visible=\"updateVisible\"\n    :title=\"dialogTitle\"\n    :width=\"880\"\n    :height=\"600\"\n    :overflowY=\"'scroll'\"\n    @confirm=\"confirm\"\n    @cancel=\"cancel\"\n  >\n    <el-form\n      ref=\"formRef\"\n      v-loading=\"formLoading\"\n      :model=\"formData\"\n      :rules=\"formRules\"\n      label-width=\"110px\"\n      style=\"padding-top: 20px\"\n    >\n      <el-form-item label=\"流程标识\" prop=\"key\">\n        <el-input\n          v-model=\"formData.key\"\n          :disabled=\"!!formData.id\"\n          placeholder=\"请输入流标标识\"\n          style=\"width: 330px\"\n        />\n        <el-tooltip\n          v-if=\"!formData.id\"\n          class=\"item\"\n          content=\"新建后，流程标识不可修改！\"\n          effect=\"light\"\n          placement=\"top\"\n        >\n          <i class=\"el-icon-question\" style=\"padding-left: 5px\"></i>\n        </el-tooltip>\n        <el-tooltip v-else class=\"item\" content=\"流程标识不可修改！\" effect=\"light\" placement=\"top\">\n          <i class=\"el-icon-question\" style=\"padding-left: 5px\"></i>\n        </el-tooltip>\n      </el-form-item>\n      <el-form-item label=\"流程名称\" prop=\"name\">\n        <el-input\n          v-model=\"formData.name\"\n          :disabled=\"!!formData.id\"\n          clearable\n          placeholder=\"请输入流程名称\"\n        />\n      </el-form-item>\n      <el-form-item v-if=\"formData.id\" label=\"流程分类\" prop=\"category\">\n        <el-tree-select\n          ref=\"treeRef\"\n          v-model=\"formData.category\"\n          :data=\"categoryTreeOptions\"\n          :props=\"defaultProps\"\n          empty-text=\"加载中，请稍后\"\n          node-key=\"id\"\n          check-strictly\n          check-on-click-node\n        />\n      </el-form-item>\n\n      <!-- <el-form-item v-if=\"formData.id\" label=\"流程分类\" prop=\"category\">\n        <el-select\n          v-model=\"formData.category\"\n          clearable\n          placeholder=\"请选择流程分类\"\n          style=\"width: 100%\"\n        >\n          <el-option\n            v-for=\"dict in getDictTypeWflow()\"\n            :key=\"dict.value\"\n            :label=\"dict.label\"\n            :value=\"dict.value\"\n          />\n        </el-select>\n      </el-form-item> -->\n      <el-form-item label=\"流程描述\" prop=\"description\">\n        <el-input v-model=\"formData.description\" clearable type=\"textarea\" />\n      </el-form-item>\n      <div v-if=\"formData.id\">\n        <el-form-item label=\"表单类型\" prop=\"formType\">\n          <el-radio-group v-model=\"formData.formType\">\n            <el-radio v-for=\"dict in getBpmModelFormType()\" :key=\"dict.value\" :label=\"dict.value\">\n              {{ dict.label }}\n            </el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item v-if=\"formData.formType == 10\" label=\"流程表单\" prop=\"formId\">\n          <el-select v-model=\"formData.formId\" clearable style=\"width: 100%\">\n            <el-option\n              v-for=\"form in formList\"\n              :key=\"form.id\"\n              :label=\"form.name\"\n              :value=\"form.id\"\n            />\n          </el-select>\n        </el-form-item>\n        <el-form-item\n          v-if=\"formData.formType == 20\"\n          label=\"表单提交路由\"\n          prop=\"formCustomCreatePath\"\n        >\n          <el-input\n            v-model=\"formData.formCustomCreatePath\"\n            placeholder=\"请输入表单提交路由\"\n            style=\"width: 330px\"\n          />\n          <el-tooltip\n            class=\"item\"\n            content=\"自定义表单的提交路径，使用 Vue 的路由地址，例如说：bpm/oa/leave/create\"\n            effect=\"light\"\n            placement=\"top\"\n          >\n            <i class=\"el-icon-question\" style=\"padding-left: 5px\"></i>\n          </el-tooltip>\n        </el-form-item>\n        <el-form-item\n          v-if=\"formData.formType === 20\"\n          label=\"表单查看路由\"\n          prop=\"formCustomViewPath\"\n        >\n          <el-input\n            v-model=\"formData.formCustomViewPath\"\n            placeholder=\"请输入表单查看路由\"\n            style=\"width: 330px\"\n          />\n          <el-tooltip\n            class=\"item\"\n            content=\"自定义表单的查看路径，使用 Vue 的路由地址，例如说：bpm/oa/leave/view\"\n            effect=\"light\"\n            placement=\"top\"\n          >\n            <i class=\"el-icon-question\" style=\"padding-left: 5px\"></i>\n          </el-tooltip>\n        </el-form-item>\n      </div>\n    </el-form>\n  </Dialog>\n</template>\n<script lang=\"ts\" setup>\n  import { getBpmModelFormType } from '@/utils/dict';\n  import { TreeItem } from '/@/components/Tree';\n  import { defaultProps } from '@/utils/tree';\n  import { ElMessageBox } from 'element-plus';\n  import * as ModelApi from '@/api/bpm/model';\n  import * as FormApi from '@/api/bpm/form';\n  import { reactive, ref, watch, onMounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useMessage } from '/@/hooks/web/useMessage';\n  import Dialog from '@/components/Framework/Modal/Dialog.vue';\n  import { defHttp } from '/@/utils/http/axios';\n\n  defineOptions({ name: 'FormDialog' });\n\n  const { t } = useI18n(); // 国际化\n  const message = useMessage(); // 消息弹窗\n\n  const props = defineProps({\n    visible: Boolean, // 是否显示弹框\n    category: String, // 流程分类\n  });\n\n  const dialogVisible = ref(false); // 弹窗的是否展示\n  const dialogTitle = ref(''); // 弹窗的标题\n  const formLoading = ref(false); // 表单的加载中：1）修改时的数据加载；2）提交的按钮禁用\n  const formType = ref(''); // 表单的类型：create - 新增；update - 修改\n  const formData = ref({\n    formType: 10,\n    name: '',\n    category: undefined,\n    description: '',\n    formId: '',\n    formCustomCreatePath: '',\n    formCustomViewPath: '',\n  });\n  const formRules = reactive({\n    category: [{ required: true, message: '参数分类不能为空', trigger: 'blur' }],\n    name: [{ required: true, message: '参数名称不能为空', trigger: 'blur' }],\n    key: [{ required: true, message: '参数键名不能为空', trigger: 'blur' }],\n    value: [{ required: true, message: '参数键值不能为空', trigger: 'blur' }],\n    visible: [{ required: true, message: '是否可见不能为空', trigger: 'blur' }],\n  });\n  const formRef = ref(); // 表单 Ref\n  const formList = ref([]); // 流程表单的下拉框的数据\n\n  const categoryTreeOptions = ref(); // 分类树\n\n  const getTreeData = (params) =>\n    defHttp.get(\n      {\n        url: '/system/common-tree/getTree',\n        params,\n      },\n      { isOnlyResult: true },\n    );\n\n  /** 打开弹窗 */\n  const open = async (type: string, id?: number) => {\n    dialogTitle.value = t('common.action.' + type);\n    formType.value = type;\n    resetForm();\n    // 修改时，设置数据\n    if (id) {\n      formLoading.value = true;\n      try {\n        formData.value = await ModelApi.getModel(id);\n      } finally {\n        formLoading.value = false;\n      }\n    }\n    // 获得流程表单的下拉框的数据\n    formList.value = await FormApi.getSimpleFormList();\n    dialogVisible.value = true;\n    emit('update:visible', true); // 关闭弹框\n  };\n  defineExpose({ open }); // 提供 open 方法，用于打开弹窗\n\n  const emit = defineEmits(['update:visible', 'success']); // 定义事件\n  /** 提交表单 */\n  const confirm = async () => {\n    // 校验表单\n    if (!formRef.value) return;\n    const valid = await formRef.value.validate();\n    if (!valid) return;\n    // 提交请求\n    formLoading.value = true;\n    try {\n      const data = formData.value as unknown as ModelApi.ModelVO;\n      if (formType.value === 'create') {\n        data.category = props.category;\n        await ModelApi.createModel(data);\n        // 提示，引导用户做后续的操作\n        await ElMessageBox.alert(\n          '<strong>新建模型成功！</strong>后续需要执行如下 4 个步骤：' +\n            '<div>1. 点击【修改流程】按钮，配置流程的分类、表单信息</div>' +\n            '<div>2. 点击【设计流程】按钮，绘制流程图</div>' +\n            '<div>3. 点击【分配规则】按钮，设置每个用户任务的审批人</div>' +\n            '<div>4. 点击【发布流程】按钮，完成流程的最终发布</div>' +\n            '另外，每次流程修改后，都需要点击【发布流程】按钮，才能正式生效！！！',\n          '重要提示',\n          {\n            dangerouslyUseHTMLString: true,\n            type: 'success',\n          },\n        );\n      } else {\n        await ModelApi.updateModel(data);\n        message.success(t('common.updateSuccess'));\n      }\n      dialogVisible.value = false;\n      // 发送操作成功的事件\n      emit('success');\n      emit('update:visible', false); // 关闭弹框\n    } finally {\n      formLoading.value = false;\n    }\n  };\n\n  /** 重置表单 */\n  const resetForm = () => {\n    formData.value = {\n      formType: 10,\n      name: '',\n      category: undefined,\n      description: '',\n      formId: '',\n      formCustomCreatePath: '',\n      formCustomViewPath: '',\n    };\n    formRef.value?.resetFields();\n  };\n\n  const updateVisible = ($event) => {\n    dialogVisible.value = $event;\n    emit('update:visible', false); // 关闭弹框\n  };\n\n  const cancel = () => {\n    dialogVisible.value = false;\n    emit('update:visible', false); // 关闭弹框\n  };\n\n  watch(\n    () => props.visible,\n    (newValue) => {\n      dialogVisible.value = newValue;\n      getBpmModelCategory();\n    },\n  );\n\n  const getBpmModelCategory = async () => {\n    const typeList = await getTreeData({ treeType: 'bpm_model_category' });\n    categoryTreeOptions.value = typeList as unknown[] as TreeItem[];\n  };\n\n  onMounted(async () => {\n    dialogVisible.value = props.visible; // 根据传入参数控制Dialog显示\n  });\n</script>\n"],"names":["t","useI18n","message","useMessage","dialogVisible","ref","dialogTitle","formLoading","formType","formData","formRules","reactive","formRef","formList","categoryTreeOptions","getTreeData","params","defHttp","__expose","type","id","__async","resetForm","ModelApi.getModel","FormApi.getSimpleFormList","emit","confirm","data","props","ModelApi.createModel","ElMessageBox","ModelApi.updateModel","_a","updateVisible","$event","cancel","watch","newValue","getBpmModelCategory","typeList","onMounted"],"mappings":"6mCAyJQ,CAAE,EAAAA,GAAMC,IACRC,EAAUC,KAOVC,EAAgBC,EAAI,EAAK,EACzBC,EAAcD,EAAI,EAAE,EACpBE,EAAcF,EAAI,EAAK,EACvBG,EAAWH,EAAI,EAAE,EACjBI,EAAWJ,EAAI,CACnB,SAAU,GACV,KAAM,GACN,SAAU,OACV,YAAa,GACb,OAAQ,GACR,qBAAsB,GACtB,mBAAoB,EAAA,CACrB,EACKK,EAAYC,GAAS,CACzB,SAAU,CAAC,CAAE,SAAU,GAAM,QAAS,WAAY,QAAS,OAAQ,EACnE,KAAM,CAAC,CAAE,SAAU,GAAM,QAAS,WAAY,QAAS,OAAQ,EAC/D,IAAK,CAAC,CAAE,SAAU,GAAM,QAAS,WAAY,QAAS,OAAQ,EAC9D,MAAO,CAAC,CAAE,SAAU,GAAM,QAAS,WAAY,QAAS,OAAQ,EAChE,QAAS,CAAC,CAAE,SAAU,GAAM,QAAS,WAAY,QAAS,OAAQ,CAAA,CACnE,EACKC,EAAUP,IACVQ,EAAWR,EAAI,CAAA,CAAE,EAEjBS,EAAsBT,IAEtBU,EAAeC,GACnBC,GAAQ,IACN,CACE,IAAK,8BACL,OAAAD,CACF,EACA,CAAE,aAAc,EAAK,CAAA,EAsBZE,EAAA,CAAE,KAlBF,CAAOC,EAAcC,IAAgBC,EAAA,sBAKhD,GAJYf,EAAA,MAAQN,EAAE,iBAAmBmB,CAAI,EAC7CX,EAAS,MAAQW,EACPG,IAENF,EAAI,CACNb,EAAY,MAAQ,GAChB,GAAA,CACFE,EAAS,MAAQ,MAAMc,EAAkBH,CAAE,CAAA,QAC3C,CACAb,EAAY,MAAQ,EACtB,CACF,CAESM,EAAA,MAAQ,MAAMW,IACvBpB,EAAc,MAAQ,GACtBqB,EAAK,iBAAkB,EAAI,CAAA,GAER,EAIrB,MAAMC,EAAU,IAAYL,EAAA,sBAI1B,GAFI,GAACT,EAAQ,OAET,EADU,MAAMA,EAAQ,MAAM,SAAS,IAG3C,CAAAL,EAAY,MAAQ,GAChB,GAAA,CACF,MAAMoB,EAAOlB,EAAS,MAClBD,EAAS,QAAU,UACrBmB,EAAK,SAAWC,EAAM,SAChB,MAAAC,EAAqBF,CAAI,EAE/B,MAAMG,GAAa,MACjB,sNAMA,OACA,CACE,yBAA0B,GAC1B,KAAM,SACR,CAAA,IAGI,MAAAC,EAAqBJ,CAAI,EACvBzB,EAAA,QAAQF,EAAE,sBAAsB,CAAC,GAE3CI,EAAc,MAAQ,GAEtBqB,EAAK,SAAS,EACdA,EAAK,iBAAkB,EAAK,CAAA,QAC5B,CACAlB,EAAY,MAAQ,EACtB,EAAA,GAIIe,EAAY,IAAM,OACtBb,EAAS,MAAQ,CACf,SAAU,GACV,KAAM,GACN,SAAU,OACV,YAAa,GACb,OAAQ,GACR,qBAAsB,GACtB,mBAAoB,EAAA,GAEtBuB,EAAApB,EAAQ,QAAR,MAAAoB,EAAe,aAAY,EAGvBC,EAAiBC,GAAW,CAChC9B,EAAc,MAAQ8B,EACtBT,EAAK,iBAAkB,EAAK,CAAA,EAGxBU,EAAS,IAAM,CACnB/B,EAAc,MAAQ,GACtBqB,EAAK,iBAAkB,EAAK,CAAA,EAG9BW,GACE,IAAMR,EAAM,QACXS,GAAa,CACZjC,EAAc,MAAQiC,EACFC,GACtB,CAAA,EAGF,MAAMA,EAAsB,IAAYjB,EAAA,sBACtC,MAAMkB,EAAW,MAAMxB,EAAY,CAAE,SAAU,oBAAsB,CAAA,EACrED,EAAoB,MAAQyB,CAAA,GAG9B,OAAAC,GAAU,IAAYnB,EAAA,sBACpBjB,EAAc,MAAQwB,EAAM,OAAA,EAC7B"}