{"version":3,"file":"Mcs8Video-6cd64aff.js","sources":["../../src/views/monitor/smartdevice/components/Mcs8Video.vue"],"sourcesContent":["<template>\n  <div class=\"mcs8-video\">\n    <a-button class=\"close-btn\" :icon=\"h(CloseOutlined)\" ghost @click=\"closeVideo\" />\n    <video class=\"video-layout\" ref=\"mcs8Video\" autoplay playsinline controls></video>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n  import { onMounted, onUnmounted, ref, h } from 'vue';\n  import { CloseOutlined } from '@ant-design/icons-vue';\n  import { useMessage } from '@/hooks/web/useMessage';\n\n  const message = useMessage();\n  const emit = defineEmits(['close']);\n\n  const props = defineProps({\n    devId: {\n      type: String,\n      default: '',\n      required: true,\n    },\n  });\n\n  const mcs8Video = ref();\n  const client = ref();\n\n  // 初始化\n  const init = async () => {\n    if (!client.value) {\n      await connectServer();\n    }\n  };\n\n  // 加载实时视频\n  const loadRealTimeVideo = async () => {\n    await client.value.openVideo(props.devId, mcs8Video.value);\n  };\n\n  // 连接服务器\n  const connectServer = async () => {\n    client.value = new mcs8Client(); //第一步：创建SDK实例\n\n    //第二步：注册SDK回调\n    client.value.on('OnManage', (request) => {\n      console.log('OnManage', request);\n      switch (request.method) {\n        case 'responseConnect': //连接服务器返回\n          {\n            if (request.errCode == 200) {\n              // document.getElementById('txtlog').value = '登录成功';\n              console.log('登录成功');\n            }\n            if (request.errCode == 401 || request.errCode == 502) {\n              message.error('连接断开');\n            }\n            if (request.errCode == 500) {\n              message.error('连接服务器失败');\n            }\n          }\n          break;\n        case 'ConnecteInfo': //返回服务器信息\n          {\n            // if (request.data != null) {\n            //     var defaultGrpId = request.data.defaultGroup;\n            //     const connParam = { groupId: defaultGrpId, talkGroupType: 3, temGroupType: 0, isCreator: 0 }\n            //     var result = client.add2MediaGroup(connParam);\n            //     newGroupId = defaultGrpId;//记录当前组ID\n            //     document.getElementById('txtGroupId').value = defaultGrpId;\n            // }\n          }\n          break;\n        case 'responseConnectMedia': //媒体连接\n          {\n            if (request.errCode == 200) {\n              // document.getElementById('txtlog').value='媒体登录成功';\n              console.log('媒体登录成功');\n\n              setTimeout(async () => {\n                await loadRealTimeVideo();\n              }, 500);\n            }\n            if (request.errCode == 401) {\n              // document.getElementById('txtlog').value='连接媒体断开';\n            }\n            if (request.errCode == 500) {\n              // document.getElementById('txtlog').value='连接媒体服务器失败';\n            }\n            if (request.errCode == 502) {\n              //document.getElementById('txtlog').value='连接媒体断开';\n            }\n          }\n          break;\n        case 'joinRoom': //加入组成功,返回组成员ID列表\n          {\n            // if (request.data.groupId == newGroupId)//判断是否为当前创建的组\n            // {\n            //     if (request.data != null && request.data.peers != null && request.data.peers.length > 0) {\n            //         for (var peer of request.data.peers)//在线设备列表\n            //         {\n            //             var videoObj = createDomObject(peer.id, 3);\n            //             client.addShowObject({ groupId: newGroupId, devId: peer.id, kind: 'audio', showObj: videoObj });//音频\n            //         }\n            //     }\n            // }\n          }\n          break;\n        case 'newPeer': //新成员加入时返回成员信息\n          {\n            // if (request.data.groupId == newGroupId)//判断是否为当前创建的组\n            // {\n            //     var videoObj = createDomObject(request.data.id, 3);\n            //     client.addShowObject({ groupId: newGroupId, devId: request.data.id, kind: 'audio', showObj: videoObj });//音频\n            // }\n          }\n          break;\n        case 'peerClosed': //当组成员时退出组时返回\n          {\n            // var ulObj = document.getElementById(\"imglist\");\n            // var liList = ulObj.getElementsByTagName(\"li\");\n            // if (liList != null && liList.length > 0) {\n            //     for (i = 0; i < liList.length; i++) {\n            //         if (liList[i].id == request.data.devId) {\n            //             liList[i].remove();\n            //             break;\n            //         }\n            //     }\n            // }\n          }\n          break;\n        case 'responseConnectGateway':\n          if (request.errCode === 502) {\n            message.error('连接失败，请核查输入信息');\n            if (client.value != null) {\n              client.value.close();\n              client.value = null;\n            }\n          }\n          break;\n        default:\n          // message.error(JSON.stringify(request))\n          break;\n      }\n      // document.getElementById('txtlog').append(JSON.stringify(request));\n    });\n    const connectModel = {\n      host: 'yyzx.zfy.ygwl.net',\n      port: '7709',\n      uid: 'pc1',\n      pwd: '000000',\n      // localVideo: document.getElementById('local_video'),\n      // localAudio: document.getElementById('local_audio'),\n      ssl: true,\n    };\n\n    // 连接服务器\n    const result = await client.value.connect(connectModel);\n    console.log('result', result);\n  };\n\n  // 关闭实时视频\n  const closeVideo = () => {\n    emit('close');\n    if (client.value) {\n      mcs8CloseVideo();\n    }\n  };\n\n  const mcs8CloseVideo = async () => {\n    await client.value.closeVideo(props.devId);\n    await client.value.close();\n  };\n\n  onMounted(() => {\n    init();\n  });\n\n  onUnmounted(() => {\n    if (client.value) {\n      mcs8CloseVideo();\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .mcs8-video {\n    position: relative;\n\n    .close-btn {\n      position: absolute;\n      z-index: 1;\n      top: 10px;\n      right: 10px;\n      color: #fff;\n      font-size: 20px;\n      cursor: pointer;\n    }\n\n    .video-layout {\n      display: block;\n      width: 100%;\n      height: 750px;\n      border-radius: 6px;\n      object-fit: fill;\n    }\n  }\n</style>\n"],"names":["message","useMessage","mcs8Video","ref","client","init","__async","connectServer","loadRealTimeVideo","props","request","connectModel","result","closeVideo","emit","mcs8CloseVideo","onMounted","onUnmounted"],"mappings":"6hBAYQA,EAAUC,IAWVC,EAAYC,IACZC,EAASD,IAGTE,EAAO,IAAYC,EAAA,sBAClBF,EAAO,QACV,MAAMG,EAAc,EACtB,GAIIC,EAAoB,IAAYF,EAAA,sBACpC,MAAMF,EAAO,MAAM,UAAUK,EAAM,MAAOP,EAAU,KAAK,CAAA,GAIrDK,EAAgB,IAAYD,EAAA,sBACzBF,EAAA,MAAQ,IAAI,WAGnBA,EAAO,MAAM,GAAG,WAAaM,GAAY,CAEvC,OADQ,QAAA,IAAI,WAAYA,CAAO,EACvBA,EAAQ,OAAQ,CACtB,IAAK,kBAEGA,EAAQ,SAAW,KAErB,QAAQ,IAAI,MAAM,GAEhBA,EAAQ,SAAW,KAAOA,EAAQ,SAAW,MAC/CV,EAAQ,MAAM,MAAM,EAElBU,EAAQ,SAAW,KACrBV,EAAQ,MAAM,SAAS,EAG3B,MACF,IAAK,eAUH,MACF,IAAK,uBAEGU,EAAQ,SAAW,MAErB,QAAQ,IAAI,QAAQ,EAEpB,WAAW,IAAYJ,EAAA,sBACrB,MAAME,EAAkB,IACvB,GAAG,GAEJE,EAAQ,SAAW,IAGnBA,EAAQ,SAAW,IAGnBA,EAAQ,SAAW,IAIzB,MACF,IAAK,WAaH,MACF,IAAK,UAQH,MACF,IAAK,aAaH,MACF,IAAK,yBACCA,EAAQ,UAAY,MACtBV,EAAQ,MAAM,cAAc,EACxBI,EAAO,OAAS,OAClBA,EAAO,MAAM,QACbA,EAAO,MAAQ,OAGnB,KAIJ,CAAA,CAED,EACD,MAAMO,EAAe,CACnB,KAAM,oBACN,KAAM,OACN,IAAK,MACL,IAAK,SAGL,IAAK,EAAA,EAIDC,EAAS,MAAMR,EAAO,MAAM,QAAQO,CAAY,EAC9C,QAAA,IAAI,SAAUC,CAAM,CAAA,GAIxBC,EAAa,IAAM,CACvBC,EAAK,OAAO,EACRV,EAAO,OACMW,GACjB,EAGIA,EAAiB,IAAYT,EAAA,sBACjC,MAAMF,EAAO,MAAM,WAAWK,EAAM,KAAK,EACnC,MAAAL,EAAO,MAAM,OAAM,GAG3B,OAAAY,EAAU,IAAM,CACTX,GAAA,CACN,EAEDY,EAAY,IAAM,CACZb,EAAO,OACMW,GACjB,CACD"}