{"version":3,"file":"StationPersonModal.vue_vue_type_script_setup_true_lang-9c4ac419.js","sources":["../../src/views/oa/attend/StationPersonModal.vue"],"sourcesContent":["<template>\n  <BasicModal v-bind=\"$attrs\" @register=\"registerModal\" :title=\"getTitle\" @ok=\"handleSubmit\">\n    <BasicForm @register=\"registerForm\" />\n  </BasicModal>\n</template>\n<script lang=\"ts\" setup>\n  import { ref, unref, computed, onMounted } from 'vue';\n  import { BasicModal, useModalInner } from '/@/components/Modal';\n  import { BasicForm, useForm } from '/@/components/Form';\n  import { getStationPerson } from '/@/api/baseset/common';\n\n  defineOptions({ name: 'StationPersonModal' });\n\n  const emit = defineEmits(['success', 'register']);\n\n  const title = ref('');\n  const type = ref('');\n  const stationId = ref('');\n  const personNames = ref([]);\n  const personData = ref([]);\n\n  const [registerForm, { resetFields, validate }] = useForm({\n    labelWidth: 100,\n    baseColProps: { span: 24 },\n    schemas: [\n      {\n        field: 'person',\n        label: '人员',\n        component: 'SelectBox',\n        componentProps: {\n          data: personData,\n          multiple: true,\n          value: [],\n          onChange: function (value, option) {\n            personNames.value = option.map((item) => item.label);\n          },\n        },\n        required: true,\n      },\n    ],\n    showActionButtonGroup: false,\n  });\n\n  const [registerModal, { setModalProps, closeModal }] = useModalInner(async (data) => {\n    resetFields();\n    setModalProps({ confirmLoading: false });\n    title.value = data?.title;\n    type.value = data?.type;\n    stationId.value = data?.stationId;\n\n    if (!personData.value.length) {\n      const personList = await getStationPerson(stationId.value);\n      personData.value = personList.map((item) => {\n        return { label: item.name, value: item.userId };\n      });\n    }\n  });\n\n  const getTitle = computed(() => unref(title));\n\n  async function handleSubmit() {\n    try {\n      const values = await validate();\n      setModalProps({ confirmLoading: true });\n      // custom api\n      closeModal();\n      emit('success', {\n        values: { type: type.value, personIds: values.person, personNames: personNames.value },\n      });\n    } finally {\n      setModalProps({ confirmLoading: false });\n    }\n  }\n</script>\n"],"names":["title","ref","type","stationId","personNames","personData","registerForm","resetFields","validate","useForm","value","option","item","registerModal","setModalProps","closeModal","useModalInner","data","__async","personList","getStationPerson","getTitle","computed","unref","handleSubmit","values","emit"],"mappings":"smBAeQ,MAAAA,EAAQC,EAAI,EAAE,EACdC,EAAOD,EAAI,EAAE,EACbE,EAAYF,EAAI,EAAE,EAClBG,EAAcH,EAAI,CAAA,CAAE,EACpBI,EAAaJ,EAAI,CAAA,CAAE,EAEnB,CAACK,EAAc,CAAE,YAAAC,EAAa,SAAAC,CAAU,CAAA,EAAIC,EAAQ,CACxD,WAAY,IACZ,aAAc,CAAE,KAAM,EAAG,EACzB,QAAS,CACP,CACE,MAAO,SACP,MAAO,KACP,UAAW,YACX,eAAgB,CACd,KAAMJ,EACN,SAAU,GACV,MAAO,CAAC,EACR,SAAU,SAAUK,EAAOC,EAAQ,CACjCP,EAAY,MAAQO,EAAO,IAAKC,GAASA,EAAK,KAAK,CACrD,CACF,EACA,SAAU,EACZ,CACF,EACA,sBAAuB,EAAA,CACxB,EAEK,CAACC,EAAe,CAAE,cAAAC,EAAe,WAAAC,EAAY,EAAIC,EAAqBC,GAASC,EAAA,sBAO/E,GANQX,IACEO,EAAA,CAAE,eAAgB,EAAA,CAAO,EACvCd,EAAM,MAAQiB,GAAA,YAAAA,EAAM,MACpBf,EAAK,MAAQe,GAAA,YAAAA,EAAM,KACnBd,EAAU,MAAQc,GAAA,YAAAA,EAAM,UAEpB,CAACZ,EAAW,MAAM,OAAQ,CAC5B,MAAMc,EAAa,MAAMC,EAAiBjB,EAAU,KAAK,EACzDE,EAAW,MAAQc,EAAW,IAAKP,IAC1B,CAAE,MAAOA,EAAK,KAAM,MAAOA,EAAK,QACxC,CACH,CAAA,EACD,EAEKS,EAAWC,EAAS,IAAMC,EAAMvB,CAAK,CAAC,EAE5C,SAAewB,GAAe,QAAAN,EAAA,sBACxB,GAAA,CACI,MAAAO,EAAS,MAAMjB,IACPM,EAAA,CAAE,eAAgB,EAAA,CAAM,EAE3BC,IACXW,EAAK,UAAW,CACd,OAAQ,CAAE,KAAMxB,EAAK,MAAO,UAAWuB,EAAO,OAAQ,YAAarB,EAAY,KAAM,CAAA,CACtF,CAAA,QACD,CACcU,EAAA,CAAE,eAAgB,EAAA,CAAO,CACzC,CACF"}